// license-guard.js
const fs = require('fs');
const path = require('path');
const LicenseGenerator = require('./license-generator');
const { getLicensePath } = require('./license-generator');

const APP_PLUGIN_ID = 'com.chahua.dbmanager'; // ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å

let cache = null;
let lastCheck = 0;

async function ensureLicensed() {
  const now = Date.now();
  if (cache && (now - lastCheck) < 30 * 60 * 1000) return cache; // ‡πÅ‡∏Ñ‡∏ä 30 ‡∏ô‡∏≤‡∏ó‡∏µ

  const lg = new LicenseGenerator();
  // ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå license ‡πÉ‡∏ô tools ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ï‡∏≠‡∏ô development ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project, ‡∏ï‡∏≠‡∏ô production ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á exe)
  let licensePath;
  
  // Check if running in production (packaged)
  if (process.env.NODE_ENV === 'production' || require('electron')?.app?.isPackaged) {
    // Production: tools folder ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á exe ‡πÑ‡∏ü‡∏•‡πå
    const execPath = process.execPath;
    const execDir = path.dirname(execPath);
    licensePath = path.join(execDir, 'tools', 'license.key');
  } else {
    // Development: tools folder ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô project root (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏ô chahua-license-system)
    licensePath = path.join(process.cwd(), 'tools', 'license.key');
  }

  if (!fs.existsSync(licensePath)) {
    throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏µ‡∏¢‡πå: ${licensePath}`);
  }
  const content = fs.readFileSync(licensePath, 'utf8');
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Å‡∏±‡∏ö machine binding
  const result = await lg.verifyLicense(content);
  
  // ‡∏ñ‡πâ‡∏≤ verify ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞ machine binding ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô UNBOUND license
  if (!result.success && result.error.includes('different machine')) {
    // ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π fingerprint
    const decryptResult = await lg.decryptLicense(content);
    if (decryptResult.success && decryptResult.data.fingerprint === 'UNBOUND') {
      console.log('üîì UNBOUND license detected, bypassing machine check...');
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á result ‡πÅ‡∏ö‡∏ö manual ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UNBOUND license
      const licenseData = decryptResult.data;
      const mockResult = {
        success: true,
        data: {
          ...licenseData,
          pluginId: licenseData.pluginId || 'com.chahua.dbmanager',
          currentTier: licenseData.durationDays || 90,
          daysRemaining: licenseData.durationDays || 90,
          expiresAt: new Date(Date.now() + (licenseData.durationDays || 90) * 24 * 60 * 60 * 1000).toISOString(),
          status: 'UNBOUND license active'
        }
      };
      const d = mockResult.data;
      cache = d; 
      lastCheck = now;
      return d;
    }
  }
  
  if (!result.success) {
    throw new Error(result.error || '‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }

  const d = result.data;
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ pluginId ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏°
  const actualPluginId = d.pluginId || 'com.chahua.dbmanager';
  
  if (APP_PLUGIN_ID && actualPluginId !== APP_PLUGIN_ID) {
    console.warn(`Plugin ID mismatch: expected ${APP_PLUGIN_ID}, got ${actualPluginId}. Allowing anyway...`);
    // ‡πÑ‡∏°‡πà throw error ‡πÅ‡∏Ñ‡πà warning
  }
  
  if ((d.daysRemaining ?? 0) <= 0) {
    throw new Error(`‡∏Ñ‡∏µ‡∏¢‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß: ${new Date(d.expiresAt).toLocaleString()}`);
  }

  cache = d; lastCheck = now;
  return d;
}

async function installLicenseFromContent(licenseContent) {
  const lg = new LicenseGenerator();
  const check = await lg.verifyLicense(licenseContent);
  if (!check.success) throw new Error(check.error || '‡∏Ñ‡∏µ‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  await lg.copyContentToRoot(licenseContent);
  await ensureLicensed(); // ‡∏£‡∏µ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
  return check.data;
}

module.exports = { ensureLicensed, installLicenseFromContent, getLicensePath, APP_PLUGIN_ID };
